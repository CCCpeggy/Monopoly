#include "Game.h"

Game::Game() :map("map1")
{
	drawMap();

	StartBlock* start = new StartBlock("°_ÂI", 0);
	map.insertBlock(start);

	for (size_t i = 1; i < 28; i++)
	{
		if (i == 14)
		{
			FateBlock* fblock = new FateBlock(i, "FateBlock");
			map.insertBlock(fblock);
		}
		else if (i == 27)
		{
			ChanceBlock* cblock = new ChanceBlock(i, "ChanceBlock");
			map.insertBlock(cblock);
		}
		else
		{
			int* toll = new int[4]{ 100,200,300,400 };
			EstateBlock* s = new EstateBlock(i, "EstateBlock", 2000, toll);
			map.insertBlock(s);
		}
	}
	map.calcBlocksLocation();

	player.push_back(Player(0, 50000, 0, 0, map[0]));
	player.push_back(Player(1, 50000, 0, 0, map[0]));
	player.push_back(Player(2, 50000, 0, 0, map[0]));
	player.push_back(Player(3, 50000, 0, 0, map[0]));
	drawupstatus();

	for (int i = 0; i < player.size(); i++) {
		player[i].displayPlayerLocation();
	}


	for (int i = 0; i < map.blockNums; i++) {
		map[i]->drawLocationName();
	}

	//while (true)
	//{
	//	getchar();
	//	player[0].rollDice(map.blockNums);
	//}
}



//ª±®aª¬ºA
void Game::drawupstatus()
{
	Draw Gridline;
	vector<int> dollaerinfo;
	for (int i = 0; i < 4; i++) {
		dollaerinfo.push_back(player[i].getMoney());
		dollaerinfo.push_back(player[i].getDebit());
		dollaerinfo.push_back(player[i].getSaving());
	}
	Gridline.showplayerlist(dollaerinfo);
	Gridline.showcurrentplayer();
}

void Game::drawMap()
{
	string boundary[34] = { "¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡D¡Ð¡Ð¡Ð¡Ð¡D¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡D¡Ð¡Ð¡Ð¡Ð¡D",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡D¡Ð¡Ð¡Ð¡Ð¡D¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡D¡Ð¡Ð¡Ð¡Ð¡D",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											  "¡D¡Ð¡Ð¡Ð¡Ð¡D¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡D¡Ð¡Ð¡Ð¡Ð¡D",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											  "¡D¡Ð¡Ð¡Ð¡Ð¡D¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡D¡Ð¡Ð¡Ð¡Ð¡D",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											  "¡D¡Ð¡Ð¡Ð¡Ð¡D¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡D¡Ð¡Ð¡Ð¡Ð¡D",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý¡@¡@¡@¡@¡ý",
											 "¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D¡Ð¡Ð¡Ð¡Ð¡D"
	};
	for (int i = 0; i < 34; i++)
	{
		cout << boundary[i] << endl;
	}
}